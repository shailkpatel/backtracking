#include <iostream>
using namespace std;

bool knightfun(int sol[100][100], int x_m[], int y_m[], int x, int y, int move, int n)
{
    int x_next, y_next, i;
    if(move == n*n) {
        return true;
    }
    for(i = 0; i < 8; i++) {
        x_next = x + x_m[i];
        y_next = y + y_m[i];
        if(x_next >= 0 && x_next < n && y_next >= 0 && y_next < n && sol[x_next][y_next] == -1) {
            sol[x_next][y_next] = move;
            if(knightfun(sol, x_m, y_m, x_next, y_next, move+1, n) == true) {
                return true;
            } else {
                sol[x_next][y_next] = -1;
            }
        }
    }
    return false;
}

void knighttour(int n)
{
    int sol[100][100];
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < n; j++) {
            sol[i][j] = -1;
        }
    }
    sol[0][0] = 0;
    int x_m[] = {1, 1, -1, -1, 2, 2, -2, -2};
    int y_m[] = {2, -2, 2, -2, 1, -1, 1, -1};
    
    if(knightfun(sol, x_m, y_m, 0, 0, 1, n) == false) {
        cout << "Tour is not possible Knight can not cover all positions " << endl;
    } else {
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                cout << sol[i][j] << "\t";
            }
            cout << endl;
        }
    }
}

int main() {
	//code
	int n;
	cout << "Enter value of N for the dimension of N*N board : ";
	cin >> n;
	knighttour(n);
	return 0;
}


/*

INPUT:
Enter value of N for the dimension of N*N board : 6

OUTPUT:
0	  21	12	29	32	35	
11	28	1	  34	13	30	
20	7	  22	31	2	  33	
27	10	3	  16	23	14	
6	  19	8	  25	4	  17	
9	  26	5	  18	15	24
